pragma solidity ^0.5.10;

import "./VeriSolContracts.sol";

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require((c / a) == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }

    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
        uint256 c = add(a, m);
        uint256 d = sub(c, 1);
        return mul(div(d, m), m);
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 public _decimals;

    constructor(string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

contract ZumToken is ERC20Detailed {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowed;
    string internal constant tokenName = "Zum Token";
    string internal constant tokenSymbol = "ZUM";
    uint8 internal constant tokenDecimals = 8;
    uint256 internal _totalSupply = 10000000000000000000;
    uint256 public basePercent = 100;

    constructor() public payable ERC20Detailed(tokenName,tokenSymbol,tokenDecimals) {
        //Begin of assumptions
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesEndingOfFunction(_decimals>0);
        VeriSol.AssumesEndingOfFunction(_decimals==8);
        VeriSol.AssumesEndingOfFunction(_totalSupply>0);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesEndingOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesEndingOfFunction(_decimals <= basePercent);
        VeriSol.AssumesEndingOfFunction(_decimals < basePercent);
        VeriSol.AssumesEndingOfFunction(_decimals != basePercent);
        VeriSol.AssumesEndingOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesEndingOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesEndingOfFunction(_decimals != _totalSupply);
        VeriSol.AssumesEndingOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesEndingOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesEndingOfFunction(basePercent != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        //End of invariants
        _issue(msg.sender, _totalSupply);
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    function cut(uint256 value) public view returns (uint256) {
        uint256 roundValue = value.ceil(basePercent);
        uint256 cutValue = roundValue.mul(basePercent).div(1000);
        return cutValue;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(_balances[msg.sender]>0);
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Requires(VeriSol.SumMapping(_balances)>0);
        VeriSol.Requires(_totalSupply>0);
        VeriSol.Requires(value>0);
        VeriSol.Requires(to!=address(0));
        VeriSol.Requires(_decimals>0);
        VeriSol.Requires(_decimals==8);
        VeriSol.Requires(msg.sender != to);
        VeriSol.Requires((_balances[msg.sender]) >= (basePercent));
        VeriSol.Requires((_balances[msg.sender]) > (basePercent));
        VeriSol.Requires((_balances[msg.sender]) != (basePercent));
        VeriSol.Requires((_balances[msg.sender]) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_balances[msg.sender]) <= (_totalSupply));
        VeriSol.Requires((_balances[msg.sender]) >= value);
        VeriSol.Requires((_balances[msg.sender]) >= (uint256(_decimals)));
        VeriSol.Requires((_balances[msg.sender]) > (uint256(_decimals)));
        VeriSol.Requires((_balances[msg.sender]) != (uint256(_decimals)));
        VeriSol.Requires((basePercent) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) < (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) != (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) <= (_totalSupply));
        VeriSol.Requires((basePercent) < (_totalSupply));
        VeriSol.Requires((basePercent) != (_totalSupply));
        VeriSol.Requires((basePercent) != (_balances[to]));
        VeriSol.Requires((basePercent) <= value);
        VeriSol.Requires((basePercent) < value);
        VeriSol.Requires((basePercent) != value);
        VeriSol.Requires((basePercent) >= (uint256(_decimals)));
        VeriSol.Requires((basePercent) > (uint256(_decimals)));
        VeriSol.Requires((basePercent) != (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) == (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) <= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) >= (_balances[to]));
        VeriSol.Requires((_totalSupply) > (_balances[to]));
        VeriSol.Requires((_totalSupply) != (_balances[to]));
        VeriSol.Requires((_totalSupply) >= value);
        VeriSol.Requires((_totalSupply) > value);
        VeriSol.Requires((_totalSupply) != value);
        VeriSol.Requires((_totalSupply) >= (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) > (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) != (uint256(_decimals)));
        VeriSol.Requires((_balances[to]) != (uint256(_decimals)));
        VeriSol.Requires(value >= (uint256(_decimals)));
        VeriSol.Requires(value > (uint256(_decimals)));
        VeriSol.Requires(value != (uint256(_decimals)));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_balances[to]>0);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals < VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals != VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals < VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals != VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        VeriSol.Ensures(_decimals <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals != VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_decimals <= value);
        VeriSol.Ensures(_decimals < value);
        VeriSol.Ensures(_decimals != value);
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals != _balances[msg.sender]);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _balances[to]);
        VeriSol.Ensures(_decimals < _balances[to]);
        VeriSol.Ensures(_decimals != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) > _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _balances[to]);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply >= value);
        VeriSol.Ensures(_totalSupply > value);
        VeriSol.Ensures(_totalSupply != value);
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply == VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply > _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply >= basePercent);
        VeriSol.Ensures(_totalSupply > basePercent);
        VeriSol.Ensures(_totalSupply != basePercent);
        VeriSol.Ensures(_totalSupply >= _balances[to]);
        VeriSol.Ensures(_totalSupply > _balances[to]);
        VeriSol.Ensures(_totalSupply != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != _balances[to]);
        VeriSol.Ensures(value <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value != _balances[msg.sender]);
        VeriSol.Ensures(value >= basePercent);
        VeriSol.Ensures(value > basePercent);
        VeriSol.Ensures(value != basePercent);
        VeriSol.Ensures(value != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _balances[to]);
        VeriSol.Ensures(_balances[msg.sender] != basePercent);
        VeriSol.Ensures(_balances[msg.sender] != _balances[to]);
        VeriSol.Ensures(basePercent <= _balances[to]);
        VeriSol.Ensures(basePercent < _balances[to]);
        VeriSol.Ensures(basePercent != _balances[to]);
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(value <= _balances[msg.sender]);
        require(to != address(0));
        uint256 tokensToBurn = cut(value);
        uint256 tokensToTransfer = value.sub(tokensToBurn);
        _balances[msg.sender] = _balances[msg.sender].sub(value);
        _balances[to] = _balances[to].add(tokensToTransfer);
        _totalSupply = _totalSupply.sub(tokensToBurn);
        emit Transfer(msg.sender, to, tokensToTransfer);
        emit Transfer(msg.sender, address(0), tokensToBurn);
        return true;
    }

    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        for (uint256 i = 0; i < receivers.length; i++) {
            transfer(receivers[i], amounts[i]);
        }
    }

    function approve(address spender, uint256 value) public returns (bool) {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Requires(_allowed[msg.sender][spender]==0);
        VeriSol.Requires(spender!=address(0));
        VeriSol.Requires(VeriSol.SumMapping(_balances)>0);
        VeriSol.Requires(_totalSupply>0);
        VeriSol.Requires(value>0);
        VeriSol.Requires(_decimals>0);
        VeriSol.Requires(_decimals==8);
        VeriSol.Requires(msg.sender != spender);
        VeriSol.Requires((basePercent) >= (_allowed[msg.sender][spender]));
        VeriSol.Requires((basePercent) > (_allowed[msg.sender][spender]));
        VeriSol.Requires((basePercent) != (_allowed[msg.sender][spender]));
        VeriSol.Requires((basePercent) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) < (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) != (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) <= (_totalSupply));
        VeriSol.Requires((basePercent) < (_totalSupply));
        VeriSol.Requires((basePercent) != (_totalSupply));
        VeriSol.Requires((basePercent) <= value);
        VeriSol.Requires((basePercent) < value);
        VeriSol.Requires((basePercent) != value);
        VeriSol.Requires((basePercent) >= (uint256(_decimals)));
        VeriSol.Requires((basePercent) > (uint256(_decimals)));
        VeriSol.Requires((basePercent) != (uint256(_decimals)));
        VeriSol.Requires((_allowed[msg.sender][spender]) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[msg.sender][spender]) < (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[msg.sender][spender]) != (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[msg.sender][spender]) <= (_totalSupply));
        VeriSol.Requires((_allowed[msg.sender][spender]) < (_totalSupply));
        VeriSol.Requires((_allowed[msg.sender][spender]) != (_totalSupply));
        VeriSol.Requires((_allowed[msg.sender][spender]) <= value);
        VeriSol.Requires((_allowed[msg.sender][spender]) < value);
        VeriSol.Requires((_allowed[msg.sender][spender]) != value);
        VeriSol.Requires((_allowed[msg.sender][spender]) <= (uint256(_decimals)));
        VeriSol.Requires((_allowed[msg.sender][spender]) < (uint256(_decimals)));
        VeriSol.Requires((_allowed[msg.sender][spender]) != (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) == (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) <= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) != value);
        VeriSol.Requires((_totalSupply) >= (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) > (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) != (uint256(_decimals)));
        VeriSol.Requires(value >= (uint256(_decimals)));
        VeriSol.Requires(value > (uint256(_decimals)));
        VeriSol.Requires(value != (uint256(_decimals)));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(_allowed[msg.sender][spender]>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_decimals <= VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals < VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals != VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals >= VeriSol.Old(_allowed[msg.sender][spender]));
        VeriSol.Ensures(_decimals > VeriSol.Old(_allowed[msg.sender][spender]));
        VeriSol.Ensures(_decimals != VeriSol.Old(_allowed[msg.sender][spender]));
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        VeriSol.Ensures(_decimals <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals <= _allowed[msg.sender][spender]);
        VeriSol.Ensures(_decimals < _allowed[msg.sender][spender]);
        VeriSol.Ensures(_decimals != _allowed[msg.sender][spender]);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals <= value);
        VeriSol.Ensures(_decimals < value);
        VeriSol.Ensures(_decimals != value);
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) <= _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) < _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) <= _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) < _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) != _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) < basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[msg.sender][spender]) != basePercent);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply != _allowed[msg.sender][spender]);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply != value);
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply == VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= basePercent);
        VeriSol.Ensures(_totalSupply > basePercent);
        VeriSol.Ensures(_totalSupply != basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != _allowed[msg.sender][spender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) == VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != basePercent);
        VeriSol.Ensures(_allowed[msg.sender][spender] != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_allowed[msg.sender][spender] == value);
        VeriSol.Ensures(_allowed[msg.sender][spender] >= value);
        VeriSol.Ensures(_allowed[msg.sender][spender] <= value);
        VeriSol.Ensures(_allowed[msg.sender][spender] >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[msg.sender][spender] > VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[msg.sender][spender] != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[msg.sender][spender] != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_allowed[msg.sender][spender] >= basePercent);
        VeriSol.Ensures(_allowed[msg.sender][spender] > basePercent);
        VeriSol.Ensures(_allowed[msg.sender][spender] != basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) == VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != basePercent);
        VeriSol.Ensures(value != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value >= basePercent);
        VeriSol.Ensures(value > basePercent);
        VeriSol.Ensures(value != basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Requires(_allowed[from][msg.sender]>0);
        VeriSol.Requires(_allowed[from][msg.sender]==900000000);
        VeriSol.Requires(from!=address(0));
        VeriSol.Requires(VeriSol.SumMapping(_balances)>0);
        VeriSol.Requires(VeriSol.SumMapping(_balances)==9999773100090000000);
        VeriSol.Requires(_totalSupply>0);
        VeriSol.Requires(_totalSupply==9999773100090000000);
        VeriSol.Requires(_balances[from]>0);
        VeriSol.Requires(_balances[from]==900000000);
        VeriSol.Requires(_balances[to]==0);
        VeriSol.Requires(value>0);
        VeriSol.Requires(value==900000000);
        VeriSol.Requires(to!=address(0));
        VeriSol.Requires(_decimals>0);
        VeriSol.Requires(_decimals==8);
        VeriSol.Requires(msg.sender != from);
        VeriSol.Requires(msg.sender == to);
        VeriSol.Requires((basePercent) <= (_allowed[from][msg.sender]));
        VeriSol.Requires((basePercent) < (_allowed[from][msg.sender]));
        VeriSol.Requires((basePercent) != (_allowed[from][msg.sender]));
        VeriSol.Requires((basePercent) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) < (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) != (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((basePercent) <= (_totalSupply));
        VeriSol.Requires((basePercent) < (_totalSupply));
        VeriSol.Requires((basePercent) != (_totalSupply));
        VeriSol.Requires((basePercent) <= (_balances[from]));
        VeriSol.Requires((basePercent) < (_balances[from]));
        VeriSol.Requires((basePercent) != (_balances[from]));
        VeriSol.Requires((basePercent) >= (_balances[to]));
        VeriSol.Requires((basePercent) > (_balances[to]));
        VeriSol.Requires((basePercent) != (_balances[to]));
        VeriSol.Requires((basePercent) <= value);
        VeriSol.Requires((basePercent) < value);
        VeriSol.Requires((basePercent) != value);
        VeriSol.Requires((basePercent) >= (uint256(_decimals)));
        VeriSol.Requires((basePercent) > (uint256(_decimals)));
        VeriSol.Requires((basePercent) != (uint256(_decimals)));
        VeriSol.Requires((_allowed[from][msg.sender]) <= (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[from][msg.sender]) < (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[from][msg.sender]) != (VeriSol.SumMapping(_balances)));
        VeriSol.Requires((_allowed[from][msg.sender]) <= (_totalSupply));
        VeriSol.Requires((_allowed[from][msg.sender]) < (_totalSupply));
        VeriSol.Requires((_allowed[from][msg.sender]) != (_totalSupply));
        VeriSol.Requires((_allowed[from][msg.sender]) == (_balances[from]));
        VeriSol.Requires((_allowed[from][msg.sender]) >= (_balances[from]));
        VeriSol.Requires((_allowed[from][msg.sender]) <= (_balances[from]));
        VeriSol.Requires((_allowed[from][msg.sender]) >= (_balances[to]));
        VeriSol.Requires((_allowed[from][msg.sender]) > (_balances[to]));
        VeriSol.Requires((_allowed[from][msg.sender]) != (_balances[to]));
        VeriSol.Requires((_allowed[from][msg.sender]) == value);
        VeriSol.Requires((_allowed[from][msg.sender]) >= value);
        VeriSol.Requires((_allowed[from][msg.sender]) <= value);
        VeriSol.Requires((_allowed[from][msg.sender]) >= (uint256(_decimals)));
        VeriSol.Requires((_allowed[from][msg.sender]) > (uint256(_decimals)));
        VeriSol.Requires((_allowed[from][msg.sender]) != (uint256(_decimals)));
        VeriSol.Requires(from != to);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) == (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) <= (_totalSupply));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_balances[from]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (_balances[from]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (_balances[from]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (_balances[to]));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != value);
        VeriSol.Requires((VeriSol.SumMapping(_balances)) >= (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) > (uint256(_decimals)));
        VeriSol.Requires((VeriSol.SumMapping(_balances)) != (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) >= (_balances[from]));
        VeriSol.Requires((_totalSupply) > (_balances[from]));
        VeriSol.Requires((_totalSupply) != (_balances[from]));
        VeriSol.Requires((_totalSupply) >= (_balances[to]));
        VeriSol.Requires((_totalSupply) > (_balances[to]));
        VeriSol.Requires((_totalSupply) != (_balances[to]));
        VeriSol.Requires((_totalSupply) >= value);
        VeriSol.Requires((_totalSupply) > value);
        VeriSol.Requires((_totalSupply) != value);
        VeriSol.Requires((_totalSupply) >= (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) > (uint256(_decimals)));
        VeriSol.Requires((_totalSupply) != (uint256(_decimals)));
        VeriSol.Requires((_balances[from]) >= (_balances[to]));
        VeriSol.Requires((_balances[from]) > (_balances[to]));
        VeriSol.Requires((_balances[from]) != (_balances[to]));
        VeriSol.Requires((_balances[from]) == value);
        VeriSol.Requires((_balances[from]) >= value);
        VeriSol.Requires((_balances[from]) <= value);
        VeriSol.Requires((_balances[from]) >= (uint256(_decimals)));
        VeriSol.Requires((_balances[from]) > (uint256(_decimals)));
        VeriSol.Requires((_balances[from]) != (uint256(_decimals)));
        VeriSol.Requires((_balances[to]) <= value);
        VeriSol.Requires((_balances[to]) < value);
        VeriSol.Requires((_balances[to]) != value);
        VeriSol.Requires((_balances[to]) <= (uint256(_decimals)));
        VeriSol.Requires((_balances[to]) < (uint256(_decimals)));
        VeriSol.Requires((_balances[to]) != (uint256(_decimals)));
        VeriSol.Requires(value >= (uint256(_decimals)));
        VeriSol.Requires(value > (uint256(_decimals)));
        VeriSol.Requires(value != (uint256(_decimals)));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_balances[from]==0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(_totalSupply==9999773100000000000);
        VeriSol.Ensures(_allowed[from][msg.sender]==0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances)==9999773100000000000);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_balances[to]>0);
        VeriSol.Ensures(_balances[to]==810000000);
        VeriSol.Ensures(_decimals >= _balances[from]);
        VeriSol.Ensures(_decimals > _balances[from]);
        VeriSol.Ensures(_decimals != _balances[from]);
        VeriSol.Ensures(_decimals <= VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals < VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals != VeriSol.Old(basePercent));
        VeriSol.Ensures(_decimals <= VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_decimals < VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_decimals != VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        VeriSol.Ensures(_decimals <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_decimals < VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_decimals != VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_decimals >= VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_decimals > VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_decimals != VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_decimals <= value);
        VeriSol.Ensures(_decimals < value);
        VeriSol.Ensures(_decimals != value);
        VeriSol.Ensures(_decimals >= _allowed[from][msg.sender]);
        VeriSol.Ensures(_decimals > _allowed[from][msg.sender]);
        VeriSol.Ensures(_decimals != _allowed[from][msg.sender]);
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _balances[to]);
        VeriSol.Ensures(_decimals < _balances[to]);
        VeriSol.Ensures(_decimals != _balances[to]);
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(basePercent));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(basePercent));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(basePercent));
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(_allowed[from][msg.sender]));
        VeriSol.Ensures(_balances[from] <= _totalSupply);
        VeriSol.Ensures(_balances[from] < _totalSupply);
        VeriSol.Ensures(_balances[from] != _totalSupply);
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_balances[from] == VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_balances[from] >= VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_balances[from] <= value);
        VeriSol.Ensures(_balances[from] < value);
        VeriSol.Ensures(_balances[from] != value);
        VeriSol.Ensures(_balances[from] == _allowed[from][msg.sender]);
        VeriSol.Ensures(_balances[from] >= _allowed[from][msg.sender]);
        VeriSol.Ensures(_balances[from] <= _allowed[from][msg.sender]);
        VeriSol.Ensures(_balances[from] <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_balances[from] < VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_balances[from] != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_balances[from] <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_balances[from] < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_balances[from] != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_balances[from] <= basePercent);
        VeriSol.Ensures(_balances[from] < basePercent);
        VeriSol.Ensures(_balances[from] != basePercent);
        VeriSol.Ensures(_balances[from] <= _balances[to]);
        VeriSol.Ensures(_balances[from] < _balances[to]);
        VeriSol.Ensures(_balances[from] != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) > _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(basePercent) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) <= _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) < _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) != _totalSupply);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) > _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) != _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_allowed[from][msg.sender]) != _balances[to]);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply < VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(VeriSol.SumMapping(_balances)));
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply < VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_balances[from]));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_balances[to]));
        VeriSol.Ensures(_totalSupply >= value);
        VeriSol.Ensures(_totalSupply > value);
        VeriSol.Ensures(_totalSupply != value);
        VeriSol.Ensures(_totalSupply >= _allowed[from][msg.sender]);
        VeriSol.Ensures(_totalSupply > _allowed[from][msg.sender]);
        VeriSol.Ensures(_totalSupply != _allowed[from][msg.sender]);
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply > VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_totalSupply == VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_totalSupply >= basePercent);
        VeriSol.Ensures(_totalSupply > basePercent);
        VeriSol.Ensures(_totalSupply != basePercent);
        VeriSol.Ensures(_totalSupply >= _balances[to]);
        VeriSol.Ensures(_totalSupply > _balances[to]);
        VeriSol.Ensures(_totalSupply != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != basePercent);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_totalSupply) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) > _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) != _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[from]) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[from]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[from]) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) > basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) >= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) > _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[from]) != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) == _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) >= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= _allowed[from][msg.sender]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) < basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != basePercent);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[to]) != _balances[to]);
        VeriSol.Ensures(value >= _allowed[from][msg.sender]);
        VeriSol.Ensures(value > _allowed[from][msg.sender]);
        VeriSol.Ensures(value != _allowed[from][msg.sender]);
        VeriSol.Ensures(value <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(value >= basePercent);
        VeriSol.Ensures(value > basePercent);
        VeriSol.Ensures(value != basePercent);
        VeriSol.Ensures(value >= _balances[to]);
        VeriSol.Ensures(value > _balances[to]);
        VeriSol.Ensures(value != _balances[to]);
        VeriSol.Ensures(_allowed[from][msg.sender] <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[from][msg.sender] < VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[from][msg.sender] != VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_allowed[from][msg.sender] <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_allowed[from][msg.sender] < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_allowed[from][msg.sender] != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_allowed[from][msg.sender] <= basePercent);
        VeriSol.Ensures(_allowed[from][msg.sender] < basePercent);
        VeriSol.Ensures(_allowed[from][msg.sender] != basePercent);
        VeriSol.Ensures(_allowed[from][msg.sender] <= _balances[to]);
        VeriSol.Ensures(_allowed[from][msg.sender] < _balances[to]);
        VeriSol.Ensures(_allowed[from][msg.sender] != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != basePercent);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) <= _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) < _balances[to]);
        VeriSol.Ensures(VeriSol.Old(uint256(_decimals)) != _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _balances[to]);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _balances[to]);
        VeriSol.Ensures(basePercent <= _balances[to]);
        VeriSol.Ensures(basePercent < _balances[to]);
        VeriSol.Ensures(basePercent != _balances[to]);
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(value <= _balances[from]);
        require(value <= _allowed[from][msg.sender]);
        require(to != address(0));
        _balances[from] = _balances[from].sub(value);
        uint256 tokensToBurn = cut(value);
        uint256 tokensToTransfer = value.sub(tokensToBurn);
        _balances[to] = _balances[to].add(tokensToTransfer);
        _totalSupply = _totalSupply.sub(tokensToBurn);
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        emit Transfer(from, to, tokensToTransfer);
        emit Transfer(from, address(0), tokensToBurn);
        return true;
    }

    function upAllowance(address spender, uint256 addedValue) public returns (bool) {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }

    function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }

    function _issue(address account, uint256 amount) internal {
        require(amount != 0);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function destroy(uint256 amount) external {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        _destroy(msg.sender, amount);
    }

    function _destroy(address account, uint256 amount) internal {
        require(amount != 0);
        require(amount <= _balances[account]);
        _totalSupply = _totalSupply.sub(amount);
        _balances[account] = _balances[account].sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function destroyFrom(address account, uint256 amount) external {
        //Begin of assumptions
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances)>0);
        VeriSol.AssumesBeginningOfFunction(_totalSupply>0);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(basePercent != _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals>0);
        VeriSol.AssumesBeginningOfFunction(_decimals==8);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.AssumesBeginningOfFunction(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.AssumesBeginningOfFunction(_decimals <= basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals < basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals != basePercent);
        VeriSol.AssumesBeginningOfFunction(_decimals <= _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals < _totalSupply);
        VeriSol.AssumesBeginningOfFunction(_decimals != _totalSupply);
        //End of assumptions
        //Begin of invariants
        VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) >= _balances[msg.sender]);
        VeriSol.Ensures(VeriSol.Old(basePercent) == basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) >= basePercent);
        VeriSol.Ensures(VeriSol.Old(basePercent) <= basePercent);
        VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances));
        VeriSol.Requires(msg.sender!=address(0));
        VeriSol.Requires(basePercent>0);
        VeriSol.Requires(basePercent==100);
        VeriSol.Ensures(basePercent>0);
        VeriSol.Ensures(basePercent==100);
        VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply));
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(_decimals <= VeriSol.Old(_balances[msg.sender]));
        VeriSol.Ensures(_decimals <= VeriSol.SumMapping(_balances));
        VeriSol.Ensures(_decimals < VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.Old(_balances[msg.sender]) != _balances[msg.sender]);
        VeriSol.Ensures(_totalSupply != VeriSol.Old(_totalSupply));
        VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) != VeriSol.SumMapping(_balances));
        VeriSol.Ensures(VeriSol.SumMapping(_balances)>0);
        VeriSol.Ensures(_totalSupply>0);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.Ensures(basePercent <= _totalSupply);
        VeriSol.Ensures(basePercent < _totalSupply);
        VeriSol.Ensures(basePercent != _totalSupply);
        VeriSol.Ensures(_decimals>0);
        VeriSol.Ensures(_decimals==8);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.Ensures(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.Ensures(_decimals <= basePercent);
        VeriSol.Ensures(_decimals < basePercent);
        VeriSol.Ensures(_decimals != basePercent);
        VeriSol.Ensures(_decimals <= _totalSupply);
        VeriSol.Ensures(_decimals < _totalSupply);
        VeriSol.Ensures(_decimals != _totalSupply);
        //End of invariants
        require(amount <= _allowed[account][msg.sender]);
        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
        _destroy(account, amount);
    }

    function contractInvariant() private view {
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances)>0);
        VeriSol.ContractInvariant(_decimals>0);
        VeriSol.ContractInvariant(_decimals==8);
        VeriSol.ContractInvariant(basePercent>0);
        VeriSol.ContractInvariant(basePercent==100);
        VeriSol.ContractInvariant(_totalSupply>0);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) >= _decimals);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) > _decimals);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) != _decimals);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) >= basePercent);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) > basePercent);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) != basePercent);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) == _totalSupply);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) >= _totalSupply);
        VeriSol.ContractInvariant(VeriSol.SumMapping(_balances) <= _totalSupply);
        VeriSol.ContractInvariant(_decimals <= basePercent);
        VeriSol.ContractInvariant(_decimals < basePercent);
        VeriSol.ContractInvariant(_decimals != basePercent);
        VeriSol.ContractInvariant(_decimals <= _totalSupply);
        VeriSol.ContractInvariant(_decimals < _totalSupply);
        VeriSol.ContractInvariant(_decimals != _totalSupply);
        VeriSol.ContractInvariant(basePercent <= _totalSupply);
        VeriSol.ContractInvariant(basePercent < _totalSupply);
        VeriSol.ContractInvariant(basePercent != _totalSupply);
    }
}